def setTitle(title){
    echo "==================================================|"
    echo title
    echo "==================================================|"
}

pipeline {
    agent {
        node { 
            label "PortalAutomationMinion"
        } 
    }
    options {
        timeout(time: 360, unit: "MINUTES")
        buildDiscarder(logRotator(numToKeepStr: "100"))
    }
    parameters {
        gitParameter name: 'AutomationVersion',
            type: 'PT_BRANCH_TAG',
            branchFilter: 'origin/(.*)',
            defaultValue: 'origin/dev',
            selectedValue: 'DEFAULT',
            sortMode: 'DESCENDING_SMART',
            useRepository: 'http://git.ctera.local/Automation/Automation.git', 
			description: 'GIT Branch or Version tag to build from'

        string(name: "PortalIP", defaultValue: "192.168.14.40", description: "PortalIP")
        string(name: "TOMCAT_PortalIP", defaultValue: "192.168.14.44", description: "TOMCAT_PortalIP")
        string(name: "AgentIP", defaultValue: "192.168.17.164", description: "AgentIP")
        string(name: "AgentMachineName", defaultValue: "AUTO-SMALL", description: "AgentMachineName")
        string(name: "AgentVersion", defaultValue: "6.0.626.1", description: "AgentVersion")
        string(name: "ApplianceIP", defaultValue: "192.168.14.46", description: "ApplianceIP")
        string(name: "Appliance_Name", defaultValue: "vgw1-for-portal-daily", description: "Appliance_Name")
        choice(name: "TestSuites", choices: ["DailyTests_6_5", "DailyTests_6_0", "DailyTests_5_5FP", "PortalHourlyTests", "HourlyTests_6_5", "HourlyTests_6_0", "HourlyTests_5_5_FP", "DailyTests_Common", "PortalInitialization", "PortalSanityTests_6_5", "PortalSanityTests_5_5FP", "PortalSanityTests_6_0", "PortalSanityTests_7_0", "SupportReportTest", "PortalGatedCommitSuite1", "PortalGatedCommitSuite2", "PortalGatedCommitSuite3"], description: "TestSuites")
        string(name: "PortalVersion", defaultValue: "", description: "PortalVersion")
        string(name: "ApplianceVersion", defaultValue: "7.0.905", description: "ApplianceVersion")
        string(name: "APPLIANCE_TYPE", defaultValue: "Genesis", description: "APPLIANCE_TYPE")
        string(name: "APPLIANCE_NETMASK", defaultValue: "255.255.255.0", description: "APPLIANCE_NETMASK")
        string(name: "APPLIANCE_DEFAULT_GATEWAY", defaultValue: "192.168.17.1", description: "APPLIANCE_DEFAULT_GATEWAY")
        // gitParameter(name: "AutomationVersion", defaultValue: "origin/dev", selectedValue: "DEFAULT", type: "PT_BRANCH_TAG", useRepository: 'http://git.ctera.local/Automation/Automation.git', branchFilter: ".*", tagFilter: "*")
    }
    stages {
        stage("Checkout") {
            steps {
                setTitle("CHECKOUT")

                checkout([  $class: "GitSCM", branches: [[name: "${params.AutomationVersion}"]],
                    extensions: [[$class: "GitLFSPull"]], userRemoteConfigs: [[credentialsId: "0367fbd2-e744-4d9d-8bba-e5bf20bc115b",
                    url: "http://git.ctera.local/Automation/Automation.git"]]])

                dir("Jenkins") {
                    git branch: "dev", credentialsId: "0367fbd2-e744-4d9d-8bba-e5bf20bc115b", url: "http://git.ctera.local/PIM/Jenkins.git"
                }
            }
        }
        stage("First shell script") {
            steps {
                setTitle("FIRST SHELL SCRIPT")
                sh '''
                    if [ "$AutomationVersion" != "origin/dev" ]; then
                    exit 0
                    fi
          
                    curl -sX POST https://ctera.dev/ingest -d @- << EOF
                    {
                        "type": "automation",
                        "product": "portal",
                        "container": "portal",
                        "sut_mode": "$TestSuites",
                        "sut_platform": "x86",
                        "sut_gw": "$ApplianceIP",
                        "sut_portal": "$PortalIP",
                        "sut_agent": "$AgentIP",
                        "version_gw": "$ApplianceVersion",
                        "version_portal": "$PortalVersion",
                        "version_agent": "$AgentVersion",
                        "suite": "$TestSuites",
                        "jenkins_build_url": "$BUILD_URL",
                        "jenkins_job": "$JOB_BASE_NAME",
                        "jenkins_build_id": $BUILD_NUMBE
                    }
                    EOF    

                    if [ $? -ne 0 ]; then
                        echo "Failed logging automation! Likely this run will NOT appear and be counted for in the builds/automation dashboards!"
                    fi
                    exit 0
                '''
            }
        }
        stage("Maven Clean - automation-core") {
            steps {
                setTitle("Maven Clean - automation-core")
                sh "mvn clean install -Dmaven.repo.local=.repository -f automation-core/pom.xml -Dmaven.test.skip=true"
            }
        }
        stage("Maven Clean - vi-management") {
            steps {
                setTitle("Maven Clean - vi-management")
                sh "mvn clean install -Dmaven.repo.local=.repository -f vi-management/pom.xml -Dmaven.test.skip=true"
            }
        }
        stage("Maven Clean - automation-api") {
            steps {
                setTitle("Maven Clean - automation-api")
                sh "mvn clean install -Dmaven.repo.local=.repository -f automation-api/pom.xml -Dmaven.test.skip=true"
            }
        }
        stage("First conditional step") {
            steps {
                script{
                    setTitle("FIRST CONDITIONAL STEP")
                    if (fileExists("automation-tests/params.ini")) {
                        echo "FILE EXSISTS"
                        error("Build failed because condition is not met")
                    } else {
                        echo "FILE DOESN'T EXSISTS" 
                         sh "cp /root/workspace/params.ini automation-tests/params.ini"
                        //sh "cp automation-tests/configuration/portalSanity/params.ini.auto  automation-tests/params.ini"
                    }
                }
            }
        }
        stage("Second shell script") {
            steps {
                setTitle("Modify configuration files params.ini and servers.ini")
                sh '''
                    sed -i "s/^PORTAL_IP[ \\t]*=.*/PORTAL_IP = ${PortalIP}/" automation-tests/params.ini
                    sed -i "s/^AGENT_IP[ \\t]*=.*/AGENT_IP = ${AgentIP}/" automation-tests/params.ini
                    sed -i "s/^AGENT_MACHINE_NAME[ \\t]*=.*/AGENT_MACHINE_NAME = ${AgentMachineName}/" automation-tests/params.ini
                    sed -i "s/^AGENT_VERSION[ \\t]*=.*/AGENT_VERSION = ${AgentVersion}/" automation-tests/params.ini
                    sed -i "s/^APPLIANCE_IP[ \\t]*=.*/APPLIANCE_IP = ${ApplianceIP}/" automation-tests/params.ini
                    sed -i "s/^APPLIANCE_NAME[ \\t]*=.*/APPLIANCE_NAME = ${Appliance_Name}/" automation-tests/params.ini
                    sed -i "s/^APPLIANCE_VERSION[ \\t]*=.*/APPLIANCE_VERSION = ${ApplianceVersion}/" automation-tests/params.ini
                    sed -i "s/^APPLIANCE_TYPE[ \\t]*=.*/APPLIANCE_TYPE = ${APPLIANCE_TYPE}/" automation-tests/params.ini
                    sed -i \'s/^APPLIANCE_SYNC_MODE[ \\t]*=.*/APPLIANCE_SYNC_MODE = CachingGateway/\' automation-tests/params.ini
                    sed -i "s/^APPLIANCE_NETMASK[ \\t]*=.*/APPLIANCE_NETMASK = ${APPLIANCE_NETMASK}/" automation-tests/params.ini
                    sed -i "s/^APPLIANCE_DEFAULT_GATEWAY[ \\t]*=.*/APPLIANCE_DEFAULT_GATEWAY = ${APPLIANCE_DEFAULT_GATEWAY}/" automation-tests/params.ini
                    sed -i "s/^PORTAL_VERSION[ \\t]*=.*/PORTAL_VERSION = ${PortalVersion}/" automation-tests/params.ini
                    sed -i \'s/^PORTAL_LICENSE[ \\t]*=.*/PORTAL_LICENSE = DPB05-9AA06-AFB98-AF705-SC350-WC350-JC350-UC350-LC350-GC350-HC350-IC350-KC350-MC350-V1R1/\' automation-tests/params.ini
                    sed -i \'s/^PORTAL_DNS_SUFFIX[ \\t]*=.*/PORTAL_DNS_SUFFIX = ctera.me/\' automation-tests/params.ini
                    sed -i \'s/^PORTAL_CERTIFICATE_LOCATION[ \\t]*=.*/PORTAL_CERTIFICATE_LOCATION = ctera_me_2021.zip/\' automation-tests/params.ini
                    
                    echo "params.ini:"
                    cat automation-tests/params.ini
                    
                    if [ -f automation-tests/configuration/portalSanity/servers.ini ] && [ "X${TOMCAT_PortalIP}" != "X" ]; then
                    
                        n1=`grep -n server1 automation-tests/configuration/portalSanity/servers.ini | gawk '{print $1}' FS=":"`
                        n2=`grep -n server2 automation-tests/configuration/portalSanity/servers.ini | gawk '{print $1}' FS=":"`
                        
                        sed -i "s/^PORTAL_VERSION[ \t]*=.*/PORTAL_VERSION = ${PortalVersion}/" automation-tests/configuration/portalSanity/servers.ini
                        
                        sed -i "$n1,$n2 s/^PORTAL_IP[ \t]*=.*/PORTAL_IP = ${PortalIP}/" automation-tests/configuration/portalSanity/servers.ini
                        sed -i "$n1,$n2 s/^PORTAL_ROLE[ \t]*=.*/PORTAL_ROLE = MAIN_DB/" automation-tests/configuration/portalSanity/servers.ini
                        
                        sed -i "$n2,$ s/^PORTAL_IP[ \t]*=.*/PORTAL_IP = ${TOMCAT_PortalIP}/" automation-tests/configuration/portalSanity/servers.ini
                        sed -i "$n2,$ s/^PORTAL_ROLE[ \t]*=.*/PORTAL_ROLE = TOMCAT_ONLY/" automation-tests/configuration/portalSanity/servers.ini
                        
                        echo "servers.ini:"
                        cat automation-tests/configuration/portalSanity/servers.ini
                    fi
                    
                '''
            }
        }
        stage("Third shell script") {
            steps {
                setTitle("THIRD SHELL SCRIPT")
                sh '''
                    if [ "$TestSuites" = "PortalInitialization" ]; then
                    exit 0;
                    fi

                    if [ "$TestSuites" = "DailyTests_Common" ]; then
                    exit 0;
                    fi

                    #if [[ "$TestSuites" == *"PortalGatedCommitSuite"* ]]; then
                    #exit 0;
                    #fi
                    cd automation-tests/src/main/resources/
                    sed -i s/"rp.enable.*"/"rp.enable = true"/ ./reportportal.properties
                    sed -i s/"rp.skipped.issue.*"/"rp.skipped.issue = false"/ ./reportportal.properties
                    sed -i s/"rp.launch.*"/"rp.launch = $TestSuites"/ ./reportportal.properties
                    sed -i s/"rp.project.*"/"rp.project = Portal"/ ./reportportal.properties
                    echo "rp.description = $PortalVersion" >> ./reportportal.properties
                    echo "rp.attributes = Ver:$PortalVersion;jBuild:$BUILD_NUMBER" >> ./reportportal.properties
                    cat reportportal.properties
                '''
            }
        }
        stage("Maven Clean - automation-tests") {
            steps {
                setTitle("Maven Clean - automation-tests")
                
                sh '''
                    ls -l
                    mvn clean test -Dmaven.repo.local=.repository -f automation-tests/pom.xml -Dtest=${TestSuites} \
                        -Dmaven.test.failure.ignore=true \
                        -DreportsDirectory=TestReports \
                        -DredirectTestOutputToFile=true \
                        -Dctera.auto.staging.mode=1 \
                        -Dctera.auto.dev.staging.resolv=${PortalIP}
                '''
            }
            post {
                always {
                    setTitle("Maven Clean - automation-tests - POST STAGE")

                    junit 'automation-tests/target/surefire-reports/*.xml'
                    archiveArtifacts 'automation-tests/target/surefire-reports/*.xml'
                }
            }
        }
        stage("Second conditional step") {
            steps {
                script{
                    setTitle("SECOND CONDITIONAL STEP")

                    if ("${currentBuild.currentResult}" == "SUCCESS" || "UNSTABLE") {  
                        try {
                            sh '''
                                rm Jenkins/known_hosts
                                python Jenkins/PortalDumpCopier.py $PortalIP ctera321 `pwd`
                            '''
                        }
                        catch (exc) {
                            echo "Could not execute shell"
                        }
                    } else {
                        echo "Current build is not Success or Unstable"
                        error("Build failed because condition is not met")
                    }
                }
            }
        }
        stage("Fifth shell script") {
            steps {
                setTitle("FIFTH SHELL SCRIPT")
                sh '''
                    #!/bin/bash

                    if [ "$AutomationVersion" != "origin/dev" ]; then
                        exit 0
                    fi
                    curl -sX POST https://ctera.dev/ingest -d @- << EOF
                    {
                        "type": "automation",
                        "jenkins_build_url": "$BUILD_URL",
                        "jenkins_job": "$JOB_BASE_NAME",
                        "jenkins_build_id": $BUILD_NUMBER,
                        "finished": true
                    }
                    EOF
                    if [ $? -ne 0 ]; then
                        echo "Failed logging automation! Likely this run will NOT appear and be counted for in the builds/automation dashboards!"
                    fi
                    exit 0
                '''
            }
        }
    }
    post {
        always {
            setTitle("POST ACTIONS")

            archiveArtifacts artifacts: "automation-tests/target/surefire-reports/*.xml", fingerprint: true, defaultExcludes: true, followSymlinks: true, caseSensitive: true
            archiveArtifacts artifacts: "automation-core.log", fingerprint: true, defaultExcludes: true, followSymlinks: true, caseSensitive: true
            script{
                try {
                    archiveArtifacts artifacts: "Jenkins/ctera_dump.tar.gz.*", fingerprint: true, defaultExcludes: true, followSymlinks: true, caseSensitive: true
                }
                catch (exc) {
                    echo "Could not archive Jenkins/ctera_dump.tar.gz.*"
                }
            }

            echo "deleting params.ini"
            sh "rm automation-tests/params.ini"
            echo "deleted params.ini"
        }
    }
}