// project-based security can't be implemented by a pipeline, has to be manual through UI

def setTitle(title){
    echo "==================================================|"
    echo title
    echo "==================================================|"
}


pipeline {
    agent {
        node { 
        label "CloudFS_Logger"
        } 
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "60"))
        timestamps ()
    }
    parameters {
        gitParameter name: "GitBranch", 
            type: "PT_BRANCH_TAG",
            branchFilter: "origin/(.*)",
            defaultValue: "origin/dev",
            selectedValue: "DEFAULT",
            sortMode: "NONE",
            useRepository: "http://git.ctera.local/Automation/Automation.git", 
			description: "GIT Branch or Version tag to build from"
        
        choice(name: "TestSuite", choices: ["linux_agent", "mac_agent", "windows_agent", "windows_agent_caching", "appliance", "appliance_caching", "portal_init", "azure_windows_caching", "s3_windows_caching"], description: "TestSuite")
        string(name: "PORTAL_VERSION", defaultValue: "", description: "PORTAL_VERSION")
        string(name: "PORTAL_IP", defaultValue: "", description: "Portal to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "PORTAL_USER", defaultValue: "admin", description: "Portal application administration user")
        string(name: "PORTAL_PASS", defaultValue: "password1!", description: "Portal application administration password")
        string(name: "PORTAL_SETUP", defaultValue: "false", description: "defines if to init the portal or not. if init is needed, need to set value to true")
        string(name: "VIRTUAL_PORTAL_NAME", defaultValue: "", description: "VIRTUAL_PORTAL_NAME")
        string(name: "APPLIANCE_VERSION", defaultValue: "", description: "APPLIANCE_VERSION")
        string(name: "APPLIANCE_IP", defaultValue: "", description: "Appliance to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "APPLIANCE_NAME", defaultValue: "", description: "Appliance to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "APPLIANCE_USER", defaultValue: "admin", description: "APPLIANCE_USER")
        string(name: "APPLIANCE_PASS", defaultValue: "password1!", description: "APPLIANCE_PASS")
        string(name: "APPLIANCE_TYPE", defaultValue: "", description: "valid options should be: X86, Genesis, arm or Kirkwood")
        string(name: "APPLIANCE_FIRST_RAID", defaultValue: "", description: "Value should be as follows: 1 - for c200, 5 - for c400/c800, linear - for vGateway")
        string(name: "APP_CACHE_IP", defaultValue: "", description: "Appliance to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "APP_CACHE_NAME", defaultValue: "", description: "Appliance to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "APP_CACHE_USER", defaultValue: "admin", description: "APP_CACHE_USER")
        string(name: "APP_CACHE_PASS", defaultValue: "password1!", description: "APP_CACHE_PASS")
        string(name: "APP_CACHE_TYPE", defaultValue: "", description: "valid options should be: X86, arm or Kirkwood, Genesis")
        string(name: "APP_CACHE_FIRST_RAID", defaultValue: "admin", description: "Value should be as follows: 1 - for c200, 5 - for c400/c800, linear - for vGateway")
        string(name: "WIN_AGENT_IP", defaultValue: "", description: "Windows agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "WIN_AGENT_NAME", defaultValue: "", description: "Windows agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "WIN_AGENT_USER", defaultValue: "qa", description: "WIN_AGENT_USER")
        string(name: "WIN_AGENT_PASS", defaultValue: "auto123!", description: "WIN_AGENT_PASS")
        string(name: "LINUX_AGENT_IP", defaultValue: "password1!", description: "Linux agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "LINUX_AGENT_NAME", defaultValue: "", description: "Linux agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "LINUX_AGENT_USER", defaultValue: "qa", description: "LINUX_AGENT_USER")
        string(name: "LINUX_AGENT_PASS", defaultValue: "password", description: "LINUX_AGENT_PASS")
        string(name: "MAC_AGENT_IP", defaultValue: "password1!", description: "MAC agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "MAC_AGENT_NAME", defaultValue: "", description: "MAC agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "MAC_AGENT_USER", defaultValue: "qa", description: "MAC_AGENT_USER")
        string(name: "MAC_AGENT_PASS", defaultValue: "password", description: "MAC_AGENT_PASS")
        string(name: "WIN_CACHE_AGENT_IP", defaultValue: "", description: "Windows caching agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "WIN_CACHE_AGENT_NAME", defaultValue: "password1!", description: "Windows agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "WIN_CACHE_AGENT_USER", defaultValue: "qa", description: "WIN_CACHE_AGENT_USER")
        string(name: "WIN_CACHE_AGENT_PASS", defaultValue: "auto123!", description: "WIN_CACHE_AGENT_PASS")
        choice(name: "MAVEN_EXEC_MODE", choices: ["test", "-Dmaven.surefire.debug test"], description: "MAVEN_EXEC_MODE")
        choice(name: "TestType", choices: ["CloudSyncRegressionScenario", "CloudSyncRegressionNotConcurrencySuite", "CloudSyncRegressionDeviceMainScenario", "CloudSyncRegressionWithDirectScenario"], description: "TestType")
        choice(name: "FlowToRun", choices: ["App", "Portal", "Dev"], description: "flag which param_ini to take")
        choice(name: "BEFORE_AFTER_OPERATION", choices: ["SuspendMarkForFullScanAndUnsuspend", "SuspendAndUnsuspend"], description: "BEFORE_AFTER_OPERATION")
        string(name: "PORTAL_LATENCY", defaultValue: "0", description: "PORTAL_LATENCY")
        choice(name: "TOGGLES_ENABLE", choices: ["false", "true"], description: "TOGGLES_ENABLE")
        choice(name: "ENABLE_RP", choices: ["false", "true"], description: "ENABLE_RP")
    }
    stages {
        stage("Checkout") {
            steps {
                setTitle("CHECKOUT")

                checkout([  $class: "GitSCM", branches: [[name: "${params.GitBranch}"]],
                        extensions: [[$class: "GitLFSPull"]], userRemoteConfigs: [[credentialsId: "0367fbd2-e744-4d9d-8bba-e5bf20bc115b",
                        url: "http://git.ctera.local/Automation/Automation.git"]]])
            }
        }
        stage("First bash script") {
            steps {
                setTitle("FIRST BASH SCRIPT")
                
                sh '''
                    #!/bin/bash

                    if [ "$GitBranch" != "origin/dev" ]; then
                        exit 0
                    fi

                    CTDEV_SUITE=$TestType
                    if [ "$CTDEV_SUITE" == "CloudSyncRegressionDeviceMainScenario" ]; then
                        CTDEV_SUITE="$BEFORE_AFTER_OPEARTION"
                    fi
                    case "$FlowToRun" in
                        App)
                            CTDEV_PRODUCT="appliance"
                            ;;
                            
                        Portal)
                            CTDEV_PRODUCT="portal"
                            ;;

                        *)
                            echo "Unknown System Under Test Type! This automation will NOT be logged!"
                            exit 0
                    esac

                    case "$TestSuite" in
                        linux_agent)
                            CTDEV_SUT_PLATFORM="agent (ubuntu)"
                            CTDEV_SUT_AGENT="$LINUX_AGENT_IP"
                            ;;
                        mac_agent)
                            CTDEV_SUT_PLATFORM="agent (mac)"
                            CTDEV_SUT_AGENT="$MAC_AGENT_IP"
                            ;;
                        windows_agent)
                            CTDEV_SUT_PLATFORM="agent (win32)"
                            CTDEV_SUT_AGENT="$WIN_AGENT_IP"
                            ;;
                        windows_agent_caching)
                            CTDEV_SUT_PLATFORM="agent (win32)"
                            CTDEV_SUT_AGENT="$WIN_CACHE_AGENT_IP"
                            ;;
                        appliance|appliance_caching)
                            CTDEV_SUT_PLATFORM="vmware"
                            ;;
                        *)
                            echo "Unknown Agent Type! This automation will NOT be logged!"
                            exit 0
                            ;;
                    esac
                    
                    curl -sX POST https://ctera.dev/ingest -d @- << EOF
                    {"type": "automation",
                    "product": "$CTDEV_PRODUCT",
                    "container": "cloudfs",
                    "sut_mode": "$TestSuite",
                    "sut_platform": "$CTDEV_SUT_PLATFORM",
                    "sut_gw": "$APPLIANCE_IP",
                    "sut_portal": "$PORTAL_IP",
                    "sut_agent": "$CTDEV_SUT_AGENT",
                    "version_gw": "$APPLIANCE_VERSION",
                    "version_portal": "$PORTAL_VERSION",
                    "version_agent": "",
                    "suite": "$CTDEV_SUITE",
                    "jenkins_build_url": "$BUILD_URL",
                    "jenkins_job": "$JOB_BASE_NAME",
                    "jenkins_build_id": $BUILD_NUMBER
                    }
                    EOF

                    if [ $? -ne 0 ]; then
                        echo "Failed logging automation! Likely this run will NOT appear and be counted for in the builds/automation dashboards!"
                    fi

                    exit 0
                '''
            }
        }
        stage("Maven Clean - automation-core") {
            steps {
                setTitle("Maven Clean - automation-core")
                
                sh "mvn clean install -Dmaven.repo.local=.repository -f automation-core/pom.xml -DskipTests=true"
            }
        }
        stage("Maven Clean - vi-management") {
            steps {
                setTitle("Maven Clean - vi-management")
                
                sh "mvn clean install -Dmaven.repo.local=.repository -f vi-management/pom.xml -DskipTests=true"
            }
        }
        stage("Maven Clean - automation-api") {
            steps {
                setTitle("Maven Clean - automation-api")
                
                sh "mvn clean install -Dmaven.repo.local=.repository -f automation-api/pom.xml -DskipTests=true"
            }
        }
        stage("Second bash script") {
            steps {
                setTitle("SECOND BASH SCRIPT")
                
                sh '''
                    cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_Portal | sed s/"PORTAL_ADMIN_USER.*"/"PORTAL_ADMIN_USER = $PORTAL_USER"/ | sed s/"PORTAL_ADMIN_PASSWORD.*"/"PORTAL_ADMIN_PASSWORD = $PORTAL_PASS"/ > ./automation-tests/syncParams.ini
                    if [ "$PORTAL_IP" != "" ]; then sed -i s/"PORTAL_IP.*"/"PORTAL_IP = $PORTAL_IP"/ ./automation-tests/syncParams.ini; fi
                    if [ "$PORTAL_VERSION" != "" ]; then sed -i s/"PORTAL_VERSION.*"/"PORTAL_VERSION = $PORTAL_VERSION"/ ./automation-tests/syncParams.ini; fi
                    grep "^PORTAL_VERSION" ./automation-tests/syncParams.ini > versions
                    sed -i s/"SETUP_NEEDED.*"/"SETUP_NEEDED = $PORTAL_SETUP"/ ./automation-tests/syncParams.ini
                    if [ "$VIRTUAL_PORTAL_NAME" != "" ]; then sed -i s/"VIRTUAL_PORTAL_NAME.*"/"VIRTUAL_PORTAL_NAME = $VIRTUAL_PORTAL_NAME"/ ./automation-tests/syncParams.ini; fi
                    sed -i s/"PORTAL_LATENCY.*"/"PORTAL_LATENCY = $PORTAL_LATENCY"/ ./automation-tests/syncParams.ini;
                '''
            }
        }
        stage("Third bash script") {
            steps {
                setTitle("THIRD BASH SCRIPT")

                sh '''
                    echo "test is: $TestSuite***"
                    if [ "$TestSuite" = "linux_agent" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentLin | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $LINUX_AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $LINUX_AGENT_PASS"/ > agent.tmp
                        if [ "$LINUX_AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $LINUX_AGENT_IP"/ agent.tmp; fi
                        if [ "$LINUX_AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $LINUX_AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "mac_agent" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentMac | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $MAC_AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $MAC_AGENT_PASS"/ > agent.tmp
                        if [ "$MAC_AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $MAC_AGENT_IP"/ agent.tmp; fi
                        if [ "$MAC_AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $MAC_AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "windows_agent" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentWin | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $WIN_AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $WIN_AGENT_PASS"/ > agent.tmp
                        if [ "$WIN_AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $WIN_AGENT_IP"/ agent.tmp; fi
                        if [ "$WIN_AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $WIN_AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "windows_agent_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentWinCache | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $WIN_CACHE_AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $WIN_CACHE_AGENT_PASS"/ > agent.tmp
                        if [ "$WIN_CACHE_AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $WIN_CACHE_AGENT_IP"/ agent.tmp; fi
                        if [ "$WIN_CACHE_AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $WIN_CACHE_AGENT_NAME"/ agent.tmp; fi
                        sed -i s/"TOGGLES_ENABLE.*"/"TOGGLES_ENABLE = $TOGGLES_ENABLE"/ ./automation-tests/syncParams.ini;
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "azure_windows_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AzureWinCache | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $WIN_CACHE_AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $WIN_CACHE_AGENT_PASS"/ > agent.tmp
                        if [ "$WIN_CACHE_AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $WIN_CACHE_AGENT_IP"/ agent.tmp; fi
                        if [ "$WIN_CACHE_AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $WIN_CACHE_AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                        sed -i s/"PORTAL_IP.*"/"PORTAL_IP = 192.168.17.134"/ ./automation-tests/syncParams.ini
                        sed -i s/"PORTAL_VERSION.*"/"PORTAL_VERSION = 6.1.1279.2"/ ./automation-tests/syncParams.ini
                        sed -i s/"SETUP_NEEDED.*"/"SETUP_NEEDED = true"/ ./automation-tests/syncParams.ini;
                        sed -i s/"STORAGE_NODE.*"/"STORAGE_NODE = Azure"/ ./automation-tests/syncParams.ini;
                        sed -i s/"TOGGLES_ENABLE.*"/"TOGGLES_ENABLE = $TOGGLES_ENABLE"/ ./automation-tests/syncParams.ini;
                    fi

                    if [ "$TestSuite" = "s3_windows_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_S3WinCache | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $WIN_CACHE_AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $WIN_CACHE_AGENT_PASS"/ > agent.tmp
                        if [ "$WIN_CACHE_AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $WIN_CACHE_AGENT_IP"/ agent.tmp; fi
                        if [ "$WIN_CACHE_AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $WIN_CACHE_AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                        sed -i s/"PORTAL_IP.*"/"PORTAL_IP = 192.168.17.130"/ ./automation-tests/syncParams.ini
                        sed -i s/"PORTAL_VERSION.*"/"PORTAL_VERSION = 6.1.1279.2"/ ./automation-tests/syncParams.ini
                        sed -i s/"SETUP_NEEDED.*"/"SETUP_NEEDED = true"/ ./automation-tests/syncParams.ini;
                        sed -i s/"STORAGE_NODE.*"/"STORAGE_NODE = S3"/ ./automation-tests/syncParams.ini;
                        sed -i s/"TOGGLES_ENABLE.*"/"TOGGLES_ENABLE = $TOGGLES_ENABLE"/ ./automation-tests/syncParams.ini;
                    fi

                    if [ "$TestSuite" = "appliance" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_App| sed s/"APPLIANCE_ADMIN_USER.*"/"APPLIANCE_ADMIN_USER = $APPLIANCE_USER"/ | sed s/"APPLIANCE_ADMIN_PASSWORD.*"/"APPLIANCE_ADMIN_PASSWORD = $APPLIANCE_PASS"/ >> ./automation-tests/syncParams.ini
                        if [ "$APPLIANCE_IP" != "" ]; then sed -i s/"APPLIANCE_IP.*"/"APPLIANCE_IP = $APPLIANCE_IP"/ ./automation-tests/syncParams.ini; fi
                        if [ "$APPLIANCE_NAME" != "" ]; then sed -i s/"APPLIANCE_NAME.*"/"APPLIANCE_NAME = $APPLIANCE_NAME"/ ./automation-tests/syncParams.ini; fi
                        if [ "$APPLIANCE_TYPE" != "" ]; then sed -i s/"APPLIANCE_TYPE.*"/"APPLIANCE_TYPE = $APPLIANCE_TYPE"/ ./automation-tests/syncParams.ini; fi
                        if [ "$APPLIANCE_FIRST_RAID" != "" ]; then sed -i s/"APPLIANCE_FIRST_RAID.*"/"APPLIANCE_FIRST_RAID = $APPLIANCE_FIRST_RAID"/ ./automation-tests/syncParams.ini; fi
                        if [ "$TestType" = "CloudSyncRegressionDeviceMainScenario" ]; then sed -i s/"BEFORE_AFTER_OPERATION.*"/"BEFORE_AFTER_OPERATION = $BEFORE_AFTER_OPERATION"/ ./automation-tests/syncParams.ini; fi
                    fi

                    if [ "$TestSuite" = "appliance_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AppCache | sed s/"APPLIANCE_ADMIN_USER.*"/"APPLIANCE_ADMIN_USER = $APP_CACHE_USER"/ | sed s/"APPLIANCE_ADMIN_PASSWORD.*"/"APPLIANCE_ADMIN_PASSWORD = $APP_CACHE_PASS"/ > app.tmp;
                        if [ "$APP_CACHE_IP" != "" ]; then sed -i s/"APPLIANCE_IP.*"/"APPLIANCE_IP = $APP_CACHE_IP"/ app.tmp; fi
                        if [ "$APP_CACHE_NAME" != "" ]; then sed -i s/"APPLIANCE_NAME.*"/"APPLIANCE_NAME = $APP_CACHE_NAME"/ app.tmp; fi
                        if [ "$APP_CACHE_TYPE" != "" ]; then sed -i s/"APPLIANCE_TYPE.*"/"APPLIANCE_TYPE = $APP_CACHE_TYPE"/ app.tmp; fi
                        if [ "$APP_CACHE_FIRST_RAID" != "" ]; then sed -i s/"APPLIANCE_FIRST_RAID.*"/"APPLIANCE_FIRST_RAID = $APP_CACHE_FIRST_RAID"/ app.tmp; fi
                        sed -i s/"TOGGLES_ENABLE.*"/"TOGGLES_ENABLE = $TOGGLES_ENABLE"/ ./automation-tests/syncParams.ini;
                        cat app.tmp >> ./automation-tests/syncParams.ini
                        if [ "$TestType" = "CloudSyncRegressionDeviceMainScenario" ]; then sed -i s/"BEFORE_AFTER_OPERATION.*"/"BEFORE_AFTER_OPERATION = $BEFORE_AFTER_OPERATION"/ ./automation-tests/syncParams.ini; fi
                    fi

                    if [ "$APPLIANCE_VERSION" != "" ]; then
                        sed -i s/"APPLIANCE_VERSION.*"/"APPLIANCE_VERSION = $APPLIANCE_VERSION"/g ./automation-tests/syncParams.ini
                        sed -i s/"^AGENT_VERSION.*"/"AGENT_VERSION = $APPLIANCE_VERSION"/g ./automation-tests/syncParams.ini
                    else
                        APPLIANCE_VERSION=$(grep ^APPLIANCE_VERSION automation-tests/syncParams.ini | tr -d ' ' | cut -d = -f2)
                    fi

                    if [ "$TestSuite" = "appliance" ] || [ "$TestSuite" = "appliance_caching" ]; then
                        grep "^APPLIANCE_VERSION" ./automation-tests/syncParams.ini >> versions
                    else
                        grep "^AGENT_VERSION" ./automation-tests/syncParams.ini | sed s/AGENT_VERSION/APPLIANCE_VERSION/ >> versions
                    fi
                '''
            }
        }
        stage("Fourth bash script") {
            steps {
                setTitle("FOURTH BASH SCRIPT")

                sh '''
                    if [ "$TestSuite" = "portal_init" ]; then
                        exit 0;
                    fi

                    cd automation-tests/src/main/resources/
                    sed -i s/"rp.enable.*"/"rp.enable = $ENABLE_RP"/ ./reportportal.properties
                    sed -i s/"rp.skipped.issue.*"/"rp.skipped.issue = false"/ ./reportportal.properties

                    if [ "$TOGGLES_ENABLE" = "true" ]; then
                        sed -i s/"rp.launch.*"/"rp.launch = $TestSuite-TOGGLES_ENABLE"/ ./reportportal.properties
                    else
                        sed -i s/"rp.launch.*"/"rp.launch = $TestSuite"/ ./reportportal.properties
                    fi


                    case $FlowToRun in
                        App)
                            if [ "$TestSuite" = "appliance_caching" ]; then
                                sed -i s/"rp.project.*"/"rp.project = cloudfs-genesis"/ ./reportportal.properties
                            fi

                            if [ "$TestSuite" = "linux_agent" ] || [ "$TestSuite" = "mac_agent" ] || [ "$TestSuite" = "windows_agent" ] || [ "$TestSuite" = "windows_agent_caching" ] || [ "$TestSuite" = "azure_windows_caching" ] || [ "$TestSuite" = "s3_windows_caching" ]; then
                                sed -i s/"rp.project.*"/"rp.project = cloudfs-agent"/ ./reportportal.properties
                            fi
                            ;;
                            
                        Portal)
                            sed -i s/"rp.project.*"/"rp.project = cloudfs-portal"/ ./reportportal.properties
                            ;;

                        *)
                            sed -i 's/"rp.enable.*"/"rp.enable = false"/' ./reportportal.properties
                            ;;
                    esac

                    echo "rp.description = $APPLIANCE_VERSION" >> ./reportportal.properties
                    echo "rp.attributes = JBuild:$BUILD_NUMBER; Ver:$APPLIANCE_VERSION" >> ./reportportal.properties


                    cat reportportal.properties
                '''
                script{
                    def props = readProperties file: 'versions'
                }
            }
        }
        stage("First conditional step") {
            steps {
                script{
                    setTitle("FIRST CONDITIONAL STEP")
                    
                    if ("${TestSuite}" == "portal_init") {
                        echo "TestSuite VAR DOES EQUALS 'portal_init'"
                        // TODO !!
                        // MAVEN - mvn might be wrong - http://jenkins.ctera.local/view/Sync%20Automation/job/CloudSyncRegressionJob/configure, https://stackoverflow.com/questions/12525288/is-there-a-way-to-pass-jvm-args-via-command-line-to-maven/12525359, https://stackoverflow.com/questions/34739321/find-java-options-used-by-maven
                        sh '''mvn clean $MAVEN_EXEC_MODE -Djvm.options=-Xms256m-Xmx1g -Dmaven.repo.local=.repository -f automation-tests/pom.xml -Dtest=CloudSyncRegressionScenarioPreperation -Dmaven.test.failure.ignore=true'''
                    } else {
                        echo "TestSuite VAR DOES NOT EQUAL 'portal_init'"
                        sh '''mvn clean $MAVEN_EXEC_MODE -Dmaven.repo.local=.repository -f automation-tests/pom.xml -Dtest=$TestType -Dmaven.test.failure.ignore=true'''
                    }
                }
            }
        }
        stage("Second conditional step") {
            steps {
                script{
                    setTitle("SECOND CONDITIONAL STEP")
                    
                    if (fileExists("automation-tests/portalVersionFile.txt") && "${PORTAL_VERSION}" == "") {
                        def second_props = readProperties  file: "automation-tests/portalVersionFile.txt"
                    } else {
                        echo "FILE (automation-tests/portalVersionFile.txt) DOESN'T EXSISTS. AND/OR PORTAL_VERSION PARAMETER NOT EQUALS EMPTY STRING" 
                    }
                }
            }
        }
        stage("Third conditional step") {
            steps {
                script{
                    setTitle("THIRD CONDITIONAL STEP")

                    if ("${APPLIANCE_VERSION}" == "" && "${TestSuite}" != "portal_init") {
                        sh '''
                            if [ -f automation-tests/syncParams.ini ]; then
                                grep ^AGENT_VERSION automation-tests/syncParams.ini > /dev/null
                                if [ $? -eq 0 ]; then
                                    echo "APPLIANCE_VERSION=$(grep ^AGENT_VERSION automation-tests/syncParams.ini | tr -d ' ' | cut -d = -f2)" > AppVer_File.txt
                                else
                                    echo "APPLIANCE_VERSION=$(grep ^APPLIANCE_VERSION automation-tests/syncParams.ini | tr -d ' ' | cut -d = -f2)" > AppVer_File.txt
                                fi
                            fi
                        '''
                        def third_props = readProperties  file: "AppVer_File.txt"
                    } else {
                        echo "APPLIANCE_VERSION not equals empty string AND/OR TestSuite equals 'portal_init'" 
                    }
                }
            }
        }
        stage("Fourth bash script") {
            steps {
                setTitle("FOURTH BASH SCRIPT")

                sh '''
                    #!/bin/bash

                    if [ "$PORTAL_VERSION" = "" ] && [ -f automation-tests/portalVersionFile.txt ]; then
                        PORTAL_VERSION=$(grep PORTAL_VERSION automation-tests/portalVersionFile.txt | cut -d = -f2 | tr -d [:space:])
                    fi 
                    if [ "$APPLIANCE_VERSION" = "" ] && [ -f AppVer_File.txt ]; then
                        APPLIANCE_VERSION=$(grep APPLIANCE_VERSION AppVer_File.txt | cut -d = -f2 | tr -d [:space:])
                    fi 
                    echo "PARAMS: APPLIANCE_VERSION=$APPLIANCE_VERSION PORTAL_VERSION=$PORTAL_VERSION TestSuite=$TestSuite TestType=$TestType"
                '''
            }
        }
        stage("Fifth bash script") {
            steps {
                setTitle("FIFTH BASH SCRIPT")

                sh '''
                    #!/bin/bash

                    if [ "$TestSuite" == "portal_init" ] || [ "$GitBranch" != "origin/dev" ]; then
                        exit 0
                    fi

                    curl -sX POST https://ctera.dev/ingest -d @- << EOF
                    {"type": "automation",
                    "jenkins_build_url": "$BUILD_URL",
                    "jenkins_job": "$JOB_BASE_NAME",
                    "jenkins_build_id": $BUILD_NUMBER,
                    "finished": true
                    }
                    EOF

                    if [ $? -ne 0 ]; then
                        echo "Failed logging automation! Likely this run will NOT appear and be counted for in the builds/automation dashboards!"
                    fi

                    exit 0
                ''' 
            }
        }
        stage("Sixth bash script") {
            steps {
                setTitle("SIXTH BASH SCRIPT")

                sh '''
                    #!/bin/bash

                    if [ ! -z $APP_CACHE_IP ]; then
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_portal_logs.sh '"$PORTAL_IP" "$JOB_BASE_NAME"''
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_support_report.sh '"$APP_CACHE_IP" "$JOB_BASE_NAME" "\"janny@ctera.com\""''
                    fi
                    if [ "$TestSuite" = "windows_agent" ]; 
                    then
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_portal_logs.sh '"$PORTAL_IP" "$JOB_BASE_NAME"''
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_support_report.sh '"$WIN_AGENT_IP:8921" "$JOB_BASE_NAME" ""janny@ctera.com"" "$WIN_AGENT_USER" "$WIN_AGENT_PASS" ''
                    fi
                    if [ "$TestSuite" = "windows_agent_caching" ]; 
                    then
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_portal_logs.sh '"$PORTAL_IP" "$JOB_BASE_NAME"''
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_support_report.sh '"$WIN_CACHE_AGENT_IP:8921" "$JOB_BASE_NAME" ""janny@ctera.com"" "$WIN_CACHE_AGENT_USER" "$WIN_CACHE_AGENT_PASS" ''
                    fi
                    if [ "$TestSuite" = "azure_windows_caching" ]; 
                    then
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_portal_logs.sh '"$PORTAL_IP" "$JOB_BASE_NAME"''
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_support_report.sh '"$WIN_CACHE_AGENT_IP:8921" "$JOB_BASE_NAME" ""janny@ctera.com"" "$WIN_CACHE_AGENT_USER" "$WIN_CACHE_AGENT_PASS" ''
                    fi

                    if [ "$TestSuite" = "s3_windows_caching" ]; 
                    then
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_portal_logs.sh '"$PORTAL_IP" "$JOB_BASE_NAME"''
                        sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210  '/root/gitRep/Performance/scripts/support_report/get_support_report.sh '"$WIN_CACHE_AGENT_IP:8921" "$JOB_BASE_NAME" ""janny@ctera.com"" "$WIN_CACHE_AGENT_USER" "$WIN_CACHE_AGENT_PASS" ''
                    fi
                ''' 
            }
        }
    }
    post {
        always {
            setTitle("POST ACTIONS")

            junit "automation-tests\\target\\surefire-reports\\*.xml"

            emailext (
                replyTo: "jenkins@ctera.com",
                to: "yahml@ctera.com",
                // to: "adi@ctera.com, galb@ctera.com, einat@ctera.com, omer@ctera.com, pavelg@ctera.com, simont@ctera.com, idan@ctera.com, janny@ctera.com, yahml@ctera.com, yuval@ctera.com"
                mimeType: 'text/html',
                attachLog: true,
                compressLog: true,
                body: '''${JELLY_SCRIPT,template="html"}''',
                subject: "${TestSuite} ${FlowToRun} Flow,  ${TestType} ${APPLIANCE_VERSION} Portal ${PORTAL_VERSION}   ${VIRTUAL_PORTAL_NAME}"
            )
        }
    }
}