def setTitle(title){
    echo "==================================================|"
    echo title
    echo "==================================================|"
}

pipeline {
    agent {
        node { 
            label "PortalAutomationMinion"
        } 
    }
    options {
        timeout(time: 360, unit: "MINUTES")
        buildDiscarder(logRotator(numToKeepStr: "30"))
        timestamps ()
    }
    parameters {
        gitParameter name: 'GitBranch',
            type: 'PT_BRANCH_TAG',
            tagFilter: '*',
            branchFilter: '.*',
            defaultValue: 'origin/dev',
            selectedValue: 'DEFAULT',
            sortMode: 'NONE',
            useRepository: 'http://git.ctera.local/Automation/Automation.git', 
			description: 'GIT Branch or Version tag to build from'

        choice(name: "TestSuite", choices: ["linux_agent", "mac_agent", "windows_agent", "windows_agent_caching", "S3_windows_caching", "Azure_windows_caching"], description: "TestSuites")
        string(name: "PORTAL_VERSION", description: "PORTAL_VERSION")
        string(name: "PORTAL_IP", description: "Portal to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "PORTAL_USER", defaultValue: "admin", description: "Portal application administration user")
        string(name: "PORTAL_PASS", defaultValue: "password1!", description: "Portal application administration password")
        string(name: "PORTAL_SETUP", defaultValue: "false", description: "defines if to init the portal or not. if init is needed, need to set value to true")
        string(name: "VIRTUAL_PORTAL_NAME", description: "VIRTUAL_PORTAL_NAME")
        string(name: "AGENT_VERSION", description: "AGENT_VERSION")
        string(name: "AGENT_IP", description: "Agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "AGENT_NAME", description: "Agent to run on - for non-default execution. Parameter should be empty to run on the regular build server")
        string(name: "AGENT_USER", defaultValue: "qa", description: "AGENT_USER")
        string(name: "AGENT_PASS", defaultValue: "password", description: "AGENT_PASS")
        choice(name: "TestType", choices: ["CloudSyncRegressionScenario", "CloudSyncRegressionWithDirectScenario"], description: "TestType")
        choice(name: "MAVEN_EXEC_MODE", choices: ["test", "-Dmaven.surefire.debug test"], description: "MAVEN_EXEC_MODE")
        choice(name: "FlowToRun", choices: ["App", "Portal"], description: "flag which param_ini to take")
        choice(name: "ENABLE_RP", choices: ["false", "true"], description: "ENABLE_RP")
    }
    stages {
        stage("Checkout") {
            steps {
                setTitle("CHECKOUT")

                checkout([  $class: "GitSCM", branches: [[name: "${params.GitBranch}"]],
                    extensions: [[$class: "GitLFSPull"]], userRemoteConfigs: [[credentialsId: "0367fbd2-e744-4d9d-8bba-e5bf20bc115b",
                    url: "http://git.ctera.local/Automation/Automation.git"]]])
            }
        }
        stage("Maven Clean - automation-core") {
            steps {
                setTitle("Maven Clean - automation-core")
                sh "mvn clean install -Dmaven.repo.local=.repository -f automation-core/pom.xml -Dmaven.test.skip=true"
            }
        }
        stage("Maven Clean - vi-management") {
            steps {
                setTitle("Maven Clean - vi-management")
                sh "mvn clean install -Dmaven.repo.local=.repository -f vi-management/pom.xml -Dmaven.test.skip=true"
            }
        }
        stage("Maven Clean - automation-api") {
            steps {
                setTitle("Maven Clean - automation-api")
                sh "mvn clean install -Dmaven.repo.local=.repository -f automation-api/pom.xml -Dmaven.test.skip=true"
            }
        }
        stage("First shell script") {
            steps {
                setTitle("FIRST SHELL SCRIPT")

                sh '''
                    cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_Portal | sed s/"PORTAL_ADMIN_USER.*"/"PORTAL_ADMIN_USER = $PORTAL_USER"/ | sed s/"PORTAL_ADMIN_PASSWORD.*"/"PORTAL_ADMIN_PASSWORD = $PORTAL_PASS"/ > ./automation-tests/syncParams.ini
                    if [ "$PORTAL_IP" != "" ]; then sed -i s/"PORTAL_IP.*"/"PORTAL_IP = $PORTAL_IP"/ ./automation-tests/syncParams.ini; fi
                    if [ "$PORTAL_VERSION" != "" ]; then sed -i s/"PORTAL_VERSION.*"/"PORTAL_VERSION = $PORTAL_VERSION"/ ./automation-tests/syncParams.ini; fi
                    grep "^PORTAL_VERSION" ./automation-tests/syncParams.ini > versions
                    sed -i s/"SETUP_NEEDED.*"/"SETUP_NEEDED = $PORTAL_SETUP"/ ./automation-tests/syncParams.ini
                    if [ "$VIRTUAL_PORTAL_NAME" != "" ]; then sed -i s/"VIRTUAL_PORTAL_NAME.*"/"VIRTUAL_PORTAL_NAME = $VIRTUAL_PORTAL_NAME"/ ./automation-tests/syncParams.ini; fi
                '''
            }
        }
        stage("Second shell script") {
            steps {
                setTitle("SECOND SHELL SCRIPT")
                sh '''
                    echo "test is: $TestSuite***"
                    if [ "$TestSuite" = "linux_agent" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentLin | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $AGENT_PASS"/ > agent.tmp
                        if [ "$AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $AGENT_IP"/ agent.tmp; fi
                        if [ "$AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "mac_agent" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentMac | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $AGENT_PASS"/ > agent.tmp
                        if [ "$AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $AGENT_IP"/ agent.tmp; fi
                        if [ "$AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "windows_agent" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentWin | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $AGENT_PASS"/ > agent.tmp
                        if [ "$AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $AGENT_IP"/ agent.tmp; fi
                        if [ "$AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "windows_agent_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AgentWinCache | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $AGENT_PASS"/ > agent.tmp
                        if [ "$AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $AGENT_IP"/ agent.tmp; fi
                        if [ "$AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                    fi

                    if [ "$TestSuite" = "S3_windows_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_S3WinCache | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $AGENT_PASS"/ > agent.tmp
                        if [ "$AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $AGENT_IP"/ agent.tmp; fi
                        if [ "$AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                        sed -i s/"PORTAL_IP.*"/"PORTAL_IP = 192.168.17.130"/ ./automation-tests/syncParams.ini;
                        sed -i s/"PORTAL_VERSION.*"/"PORTAL_VERSION = 6.1.1279.2"/ ./automation-tests/syncParams.ini;
                    fi

                    if [ "$TestSuite" = "Azure_windows_caching" ]; then
                        cat /media/newdrive/SyncGatewayParams/$FlowToRun/params.ini_AzureWinCache | sed s/"AGENT_MACHINE_USER.*"/"AGENT_MACHINE_USER = $AGENT_USER"/ | sed s/"AGENT_MACHINE_PASSWORD.*"/"AGENT_MACHINE_PASSWORD = $AGENT_PASS"/ > agent.tmp
                        if [ "$AGENT_IP" != "" ]; then sed -i s/"AGENT_IP.*"/"AGENT_IP = $AGENT_IP"/ agent.tmp; fi
                        if [ "$AGENT_NAME" != "" ]; then sed -i s/"AGENT_MACHINE_NAME.*"/"AGENT_MACHINE_NAME = $AGENT_NAME"/ agent.tmp; fi
                        cat agent.tmp >> ./automation-tests/syncParams.ini
                        sed -i s/"PORTAL_IP.*"/"PORTAL_IP = 192.168.17.134"/ ./automation-tests/syncParams.ini;
                        sed -i s/"PORTAL_VERSION.*"/"PORTAL_VERSION = 6.1.1279.2"/ ./automation-tests/syncParams.ini;
                    fi

                    if [ "$AGENT_VERSION" != "" ]; then
                        sed -i s/"^AGENT_VERSION.*"/"AGENT_VERSION = $AGENT_VERSION"/g ./automation-tests/syncParams.ini
                    fi


                    grep "^AGENT_VERSION" ./automation-tests/syncParams.ini | sed s/AGENT_VERSION/APPLIANCE_VERSION/ >> versions
                '''
            }
        }
        stage("Third shell script") {
            steps {
                setTitle("THIRD SHELL SCRIPT")
                sh '''
                    cd automation-tests/src/main/resources/
                    sed -i s/"rp.enable.*"/"rp.enable = $ENABLE_RP"/ ./reportportal.properties
                    sed -i s/"rp.skipped.issue.*"/"rp.skipped.issue = false"/ ./reportportal.properties
                    sed -i s/"rp.launch.*"/"rp.launch = $TestSuite"/ ./reportportal.properties

                    case $FlowToRun in
                        "App")
                            sed -i 's/rp\\.project.*/rp.project = cloudfs-agent/' ./reportportal.properties
                            ;;
                            
                        "Portal")
                            sed -i 's/rp\.project.*/rp.project = cloudfs-portal/' ./reportportal.properties
                            ;;

                        *)
                            sed -i 's/"rp.enable.*"/"rp.enable = false"/' ./reportportal.properties
                            ;;
                    esac

                    echo "rp.description = $AGENT_VERSION" >> ./reportportal.properties
                    echo "rp.attributes = JBuild:$BUILD_NUMBER; Ver:$AGENT_VERSION" >> ./reportportal.properties

                    cat reportportal.properties
                '''

                script{
                    def first_props = readProperties  file: "versions"
                }
            }
        }
        stage("First conditional step") {
            steps {
                setTitle("FIRST CONDITIONAL STEP")
                
                script{
                    if ("${TestSuite}" == "portal_init") {  
                        sh '''mvn clean $MAVEN_EXEC_MODE -Dmaven.repo.local=.repository -f automation-tests/pom.xml -Dtest=CloudSyncRegressionScenario -Dmaven.test.failure.ignore=true -Dprint_request=false'''
                    } else {
                        echo "TestSuite is not 'portal_init'"
                    }
                }
            }
        }
        stage("Second conditional step") {
            steps {
                setTitle("SECOND CONDITIONAL STEP")

                script{
                    if (fileExists(automation-tests/portalVersionFile.txt) && "${PORTAL_VERSION}" == "") {  
                        def second_props = readProperties  file: "automation-tests/portalVersionFile.txt"
                    } else {
                        echo "Current build is not Success or Unstable"
                    }
                }
            }
        }
        stage("Third conditional step") {
            steps {
                setTitle("THIRD CONDITIONAL STEP")

                script{
                    if ("${AGENT_VERSION}" == "" && "${TestSuite}" != "portal_init") {  
                        sh '''
                            if [ -f automation-tests/syncParams.ini ]; then
                                grep ^AGENT_VERSION automation-tests/syncParams.ini > /dev/null
                                if [ $? -eq 0 ]; then
                                    echo "AGENT_VERSION=$(grep ^AGENT_VERSION automation-tests/syncParams.ini | tr -d ' ' | cut -d = -f2)" > AppVer_File.txt
                                fi
                            fi
                        '''
                        def third_props = readProperties  file: "AppVer_File.txt"
                    } else {
                        echo "CONDITION NOT MET"
                    }
                }
            }
        }
        stage("Fourth shell script") {
            steps {
                setTitle("FOURTH SHELL SCRIPT")
                
                sh '''
                    #!/bin/bash

                    if [ "$PORTAL_VERSION" = "" ] && [ -f automation-tests/portalVersionFile.txt ]; then
                        PORTAL_VERSION=$(grep PORTAL_VERSION automation-tests/portalVersionFile.txt | cut -d = -f2 | tr -d [:space:])
                    fi 
                    if [ "$AGENT_VERSION" = "" ] && [ -f AppVer_File.txt ]; then
                        AGENT_VERSION=$(grep AGENT_VERSION AppVer_File.txt | cut -d = -f2 | tr -d [:space:])
                    fi 
                    echo "PARAMS: AGENT_VERSION=$AGENT_VERSION PORTAL_VERSION=$PORTAL_VERSION TestSuite=$TestSuite TestType=$TestType"
                '''
            }
        }
        stage("Fifth shell script") {
            steps {
                setTitle("FIFTH SHELL SCRIPT")
                
                sh '''
                    echo $(date "+%b %d %H:%M:%S")": INFO : Getting support report"
                    sshpass -p password1! ssh -o "StrictHostKeyChecking=no" root@192.168.18.210 \
                    '/root/gitRep/Performance/scripts/support_report/get_support_report.sh '"$AGENT_IP:8921" "$JOB_NAME" "\\"adi@ctera.com talm@ctera.com\\"" "$AGENT_USER" "$AGENT_PASS"''
                '''
            }
        }
    }
    post {
        always {
            setTitle("POST ACTIONS")

            archiveArtifacts artifacts: "automation-tests\\target\\surefire-reports\\*.xml"
            
            emailext (
                replyTo: "jenkins@ctera.com",
                to: "yahml@ctera.com"
                //   to: "adi@ctera.com, galb@ctera.com, einat@ctera.com, omer@ctera.com, pavelg@ctera.com, simont@ctera.com, idan@ctera.com, janny@ctera.com, olegc@ctera.com",
                mimeType: 'text/html',
                attachLog: true,
                compressLog: true,
                body: '''${JELLY_SCRIPT,template="html"}''',
                subject: "${TestSuite} ${FlowToRun} Flow,  ${TestType}  CloudSyncRegressionScenario ${APPLIANCE_VERSION} Portal ${PORTAL_VERSION}"
            )
        }
    }
}